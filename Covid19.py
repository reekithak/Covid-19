# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wUvRXSqwXa-79s_LmhpK6IAPIo4Rg03S
"""

from google.colab import drive

drive.mount('/content/gdrive', force_remount=True)

import dlib as dlib
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras  import utils

from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers.core import Dropout, Lambda



model = Sequential()

model.add(Convolution2D(64,3,3, input_shape = (512,512,3), activation= 'relu'))
model.add(Convolution2D(64,3,3,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Convolution2D(64,3,3, input_shape = (512,512,3), activation= 'relu'))
model.add(Convolution2D(32,3,3,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Convolution2D(128,3,3, input_shape = (512,512,3), activation= 'relu'))
model.add(Convolution2D(128,3,3,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Convolution2D(128,2,2, input_shape = (512,512,3), activation= 'relu'))
model.add(Convolution2D(128,2,2,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Convolution2D(256,2,2, input_shape = (512,512,3), activation= 'relu'))
model.add(Convolution2D(256,2,2,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))




model.add(Convolution2D(256,3,3, input_shape = (512,512,3), activation= 'relu'))
model.add(Dropout(0.1))
model.add(Convolution2D(256,3,3,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Convolution2D(256,3,3, input_shape = (512,512,3), activation= 'relu'))
model.add(Dropout(0.1))


model.add(Flatten())
model.add(Dense(output_dim=128 , activation='relu'))
model.add(Dense(output_dim=1, activation='sigmoid'))




model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator( rescale = 1./255,
                                  shear_range=0.2,
                                  zoom_range=0.2,
                                  horizontal_flip=True,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   rotation_range=15,
                                   vertical_flip=True,
                                   fill_mode='reflect',
                                   data_format='channels_last',
                                   brightness_range=[0.5, 1.5],
                                   featurewise_center=True,
                                   featurewise_std_normalization=True
                                  )
test_datagen = ImageDataGenerator(rescale = 1./255)

root_dir = "drive/My Drive/"

training_set = train_datagen.flow_from_directory("/content/gdrive/My Drive/Covid19/Xray/folder1",
                                                 target_size = (512, 512),
                                                 batch_size = 1,
                                                 class_mode = 'binary')
test_set = test_datagen.flow_from_directory("/content/gdrive/My Drive/Covid19/Xray/folder2",
                                            target_size = (512, 512),
                                            batch_size = 1,
                                            class_mode = 'binary')

hit = model.fit_generator(training_set,
                              samples_per_epoch = 347 ,
                               nb_epoch =215,
                               validation_data= test_set,
                               nb_val_samples = 20
                              )

from keras.models import model_from_json
model_json = model.to_json()
with open("/content/gdrive/My Drive/Covid19/Xray/model.json",'w') as json_file:
    json_file.write(model_json)
model.save_weights("/content/gdrive/My Drive/Covid19/Xray/model.h5")


fig = plt.figure()
plt.plot(hit.history['val_loss'])
plt.legend(['Validation'],loc='upper left')
plt.title('validation loss vs epoch')
plt.ylabel('validation loss')
plt.xlabel('Epoch')




plt.plot(hit.history['accuracy'])
plt.legend(['validation'], loc='upper left')
plt.title('validation accuracy vs epoch')
plt.ylabel('validation accuracy')
plt.xlabel('Epoch')













